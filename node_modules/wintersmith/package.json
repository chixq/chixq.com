{
  "name": "wintersmith",
  "version": "2.0.9",
  "author": {
    "name": "Johan Nordberg",
    "email": "its@johan-nordberg.com"
  },
  "description": "A flexible static site generator.",
  "license": "MIT",
  "main": "./lib/",
  "keywords": [
    "static",
    "generator",
    "markdown",
    "jade"
  ],
  "bin": {
    "wintersmith": "./bin/wintersmith"
  },
  "scripts": {
    "prepublish": "node ./bin/dev/compile_coffee"
  },
  "directories": {
    "lib": "./lib/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jnordberg/wintersmith.git"
  },
  "dependencies": {
    "marked": "0.2.x",
    "coffee-script": ">=1.3.0",
    "async": "0.2.x",
    "highlight.js": "7.x.x",
    "jade": ">=0.25.0",
    "ncp": "0.2.x",
    "rimraf": "2.x.x",
    "winston": "0.6.x",
    "colors": "0.x.x",
    "glob": "3.1.x",
    "optimist": "0.3.x",
    "minimatch": "0.2.x",
    "mime": "1.2.x",
    "js-yaml": "2.1.x",
    "mkdirp": "0.3.x",
    "chokidar": "0.6.x",
    "server-destroy": "1.0.x",
    "npm": "1.2.x",
    "slugg": "~0.1.2"
  },
  "devDependencies": {
    "shelljs": "0.1.x"
  },
  "engine": {
    "node": ">=0.6"
  },
  "readme": "#![Wintersmith](http://wintersmith.io/images/wintersmith.svg)\n\nWintersmith is a simple yet flexible static site generator. It takes contents (markdown, less, scripts, etc), transforms them using plugins and outputs a static website (html, css, images, etc) that you can host anywhere.\n\nIt ships with plugins for [markdown](http://daringfireball.net/projects/markdown/) and [jade templates](https://github.com/visionmedia/jade), if you need something else check the [plugin listing][plugin-listing] or [write your own][plugin-guide]!\n\n## Resources\n\n * [Project site][website]\n * [API Documentation][docs]\n * [Wiki][wiki]\n * [stackoverflow tag](http://stackoverflow.com/questions/tagged/wintersmith)\n * IRC - **#wintersmith** on freenode\n\n[website]: http://wintersmith.io \"Wintersmith project website\"\n[docs]: http://wintersmith.io/docs \"Wintersmith API Documentation\"\n[wiki]: https://github.com/jnordberg/wintersmith/wiki \"Wintersmith wiki\"\n[plugin-listing]: https://github.com/jnordberg/wintersmith/wiki/Plugins \"Wintersmith plugin listing\"\n[plugin-guide]: https://github.com/jnordberg/wintersmith/wiki/Writing-plugins \"Wintersmith plugin guide\"\n\n## Quick-start\n\nFirst install wintersmith using [npm](http://npmjs.org/):\n\n```bash\n$ npm install wintersmith -g\n```\n\nThis will install wintersmith globally on your system so that you can access the `wintersmith` command from anywhere. Once that is complete run:\n\n```bash\n$ wintersmith new <path>\n```\n\nWhere `<path>` is the location you want the site to be generated. This creates a skeleton site with a basic set of templates and some articles, while not strictly needed it's a good starting point.\n\nNow enter the directory and start the preview server:\n\n```bash\n$ cd <path>\n$ wintersmith preview\n```\n\nAt this point you are ready to start customizing your site. Point your browser to `http://localhost:8080` and start editing templates and articles.\n\nWhen done run:\n\n```bash\n$ wintersmith build\n```\n\nThis generates your site and places it in the `build/` directory - all ready to be copied to your web server!\n\nAnd remember to give the old `--help` a look :-)\n\n## Overview\n\nA wintersmith site is built up of three main components: contents, views and templates.\n\nContents is a directory where all the sites raw material goes (markdown files, images, javascript etc). This directory is then scanned to produce what's internally called a ContentTree.\n\nThe ContentTree is a nested object built up of ContentPlugins and looks something like this:\n\n```javascript\n{\n  \"myfile.md\": {MarkdownPlugin} // plugin instance, subclass of ContentPlugin\n  \"some-dir/\": { // another ContentTree instance\n    \"image.jpg\": {StaticPlugin}\n    \"random.file\": {StaticPlugin}\n  }\n}\n```\n\n![Wintersmith](http://wintersmith.io/images/flow.svg)\n\nThis content tree is provided in full to the views when rendering. This gives you a lot of flexibility when writing plugins, you could for example write a plugin that generates a mosaic using images located in a specific directory.\n\nWintersmith comes with a default Page plugin that renders markdown content using templates. This plugin takes markdown (combined with some metadata, more on this later) compiles it and provides it to a template along with the content tree and some utility functions.\n\nThis brings us to the second component, the template directory. All templates found in this directory are loaded and are also passed to the content plugins when rendering.\n\nBy default only `.jade` templates are loaded, but you can easily add template plugins to use a template engine of your choosing.\n\nCheck the `examples/` directory for some inspiration on how you can use wintersmith or the [showcase](https://github.com/jnordberg/wintersmith/wiki/Showcase) to see what others are doing.\n\n## Configuration\n\nConfiguration can be done with command-line options, a config file or both. The config file will be looked for as `config.json` in the root of your site (you can set a custom path using `--config`).\n\n### Options\n\nName         | Default         | Description\n-------------|-----------------|-----------------------------------------------\ncontents     | `./contents`    | contents directory location\ntemplates    | `./templates`   | templates directory location\nviews        | `null`          | views directory location, optional\nlocals       | `{}`            | global site variables, can also be a path to a json file\nrequire      | `{}`            | modules to load and add to locals. e.g. if you want underscore as `_` you would say `{\"_\": \"underscore\"}`\nplugins      | `[]`            | list of plugins to load\nignore       | `[]`            | list of files or pattern to ignore\noutput       | `./build`       | output directory, this is where the generated site is output when building\nbaseUrl      | `/`             | base url that site lives on, e.g. `/blog/`.\nhostname     | `null`          | hostname to bind preview server to, null = INADDR_ANY\nport         | `8080`          | port preview server listens on\n\nAll paths can either be relative or absolute. Relative paths will be resolved from the working directory or `--chdir` if set.\n\n## Content Plugins\n\nContentPlugins transform content, each item in the content tree is represented by a ContentPlugin instance. Content plugins can be created from files matching a glob pattern or by generators.\n\nThe ContentPlugin class is that all content plugins inherit from. Subclasses have to implement the `getFilename` and `getView` instance methods and the `fromFile` class method - more info in the [plugin guide][plugin-guide].\n\nAll content plugins have the following properties (a property in wintersmith is simply a shortcut to a getter. i.e. `item.filename` is the same as calling `item.getFilename()`)\n\nProperty     | Getter signature | Description\n-------------|------------------|---------------------\nfilename     | `getFilename()`  | filename content will be rendered to\nview         | `getView()`      | function used to render the plugin, e.g. the page plugin uses a view that passes the plugin and locals to a template\nurl          | `getUrl(base)`   | url for the content. *base* is from where this url will be resolved and defaults to `config.baseUrl`. for example you can call `content.getUrl('http://myiste.com')` to get a permalink to that content\n\n## The Page plugin\n\nWintersmith ships with a page plugin. This plugin is what the markdown page and many other content plugins build upon.\n\n### Model\n\nThe Page model (inherits from ContentPlugin)\n\nProperties:\n\nName         | Description\n-------------|------------\nmetadata     | object containing the pages metadata\ntitle        | `metadata.title` or `Untitled`\ndate         | Date object created from `metadata.date` if set, unix epoch time if not\nrfc822date   | a rfc-822 formatted string made from `date`\nbody         | markdown source\nhtml         | parsed markdown as html\n\n\nA MarkdownPage is either a markdown file with metadata on top or a json file located in the contents directory.\n\n```markdown\n---\ntitle: My first post\ndate: 2012-12-12 12:12\nauthor: John Hjort <foo@bar.com>\ntemplate: article.jade\n----\n\n# Hello friends!\n\nLife is wonderful, isn't it?\n\n```\n\nor use json to simply pass metadata to a template:\n\n```json\n{\n  \"template\": \"template.jade\",\n  \"stuff\": {\n  \t\"things\": 123,\n  \t\"moar\": [1, 2, 3]\n  }\n}\n```\n\nPages are by default rendered using the `template` view. This view passes the page to the template provided in the metadata. Omitting the template key or setting it to `none` will cause the page not to be rendered.\n\n### Links\n\nAll relative links in the markdown will be resolved correctly when rendering. This means you can just place *image.png* in the same directory and simply include it in your markdown as `![my image](image.png)`\n\nThis is especially convenient when using a markdown editor (read [Mou](http://mouapp.com/) if you're on a mac).\n\n### Metadata\n\nMetadata is parsed using [js-yaml](https://github.com/nodeca/js-yaml) and will be accessible in the template as `page.metadata`.\n\nThere are two special metadata keys, The first one is `template` which specifies what template to render the page with. If the key is omitted or set to `none` the page will not be rendered (but still available in the content tree).\n\nThe second one is `filename` which can be used to override the output filename of the page. See filename see [filename templating](https://github.com/jnordberg/wintersmith/wiki/Page-Plugin#filename-templating) for advanced usage.\n\n### Templates\n\nWhen a page is rendered to a template the page instance is available as `page` in the template context. The content tree is also available as `contents` and `config.locals` is the root object.\n\n## Plugins\n\nA plugin is a function that's called with the wintersmith environment and a callback.\n\nPlugins are loaded by adding a \"require id\" to `config.plugins`. This can be a path, local- or global module.\nIt works just like you would expect a `require()` call to.\n\nPlugin example:\n\n```coffeescript\nfs = require 'fs'\n\nmodule.exports = (env, callback) ->\n\n  class SimonSays extends env.ContentPlugin\n\n    constructor: (@filepath, text) ->\n      @text = \"Simon says: #{ text }\"\n\n    getFilename: -> @filepath.relative # relative to content directory\n\n    getView: -> (env, locals, contents, templates, callback) ->\n      callback null, new Buffer @text\n\n  SimonSays.fromFile = (filepath, callback) ->\n    fs.readFile filepath.full, (error, buffer) ->\n      if error\n        callback error\n      else\n        callback null, new SimonSays filepath, buffer.toString()\n\n  env.registerContentPlugin 'text', '**/*.txt', SimonSays\n  callback() # tell the plugin manager we are done\n```\n\nSee the [plugin guide][plugin-guide] for more info.\n\n## Using wintersmith programmatically\n\nexample:\n\n```javascript\n\nvar wintersmith = require('wintersmith');\n\n// create the sites environment, can also be called with a config object. e.g.\n// {contents: '/some/contents', locals: {powerLevel: 10}}, ..}\nvar env = wintersmith('/path/to/my/config.json');\n\n// build site\nenv.build(function(error) {\n  if (error) throw error;\n  console.log('Done!');\n});\n\n// preview\nenv.preview(function(error, server) {\n  if (error) throw error;\n  console.log('Server running!');\n});\n\n// do something with the content tree\nenv.load(function(error, result) {\n  if (error) throw error;\n  console.log('Contents loaded!');\n});\n\n```\n\nCheck the source or [api docs][docs] for a full list of methods.\n\n## About\n\nWintersmith is written by [Johan Nordberg](http://johan-nordberg.com) using [CoffeeScript](http://coffeescript.org/) and licensed under the [MIT-license](http://en.wikipedia.org/wiki/MIT_License).\n\nThe name is a nod to [blacksmith](https://github.com/flatiron/blacksmith) which inspired this project.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jnordberg/wintersmith/issues"
  },
  "_id": "wintersmith@2.0.9",
  "_from": "wintersmith@~2.0.9"
}
